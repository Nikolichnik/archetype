#!/bin/sh
#
# Main Archetype script. Used to update local Arhetype repository with changes
# made to dotfiles and scripts on the local machine and vice-versa.
#
# Usage:
#     archetype [options] <action>
#
# Options:
#     -a      Specify custom Archetype repository
#     -r      Remote switch - perform any of the actions on the remote Archetype repository
#
# Actions:
#     status  Check for discrepancies between the Archetype repository and deployed files
#     pull    Pull changes from the Archetype repository
#     push    Push changes to the Archetype repository
#     sync    Perform synchronization between the Archetype repository and the deployed files
#     progs   Check for discrepancies between installed packages and programs.csv
#
#
# by nikolichnik <nikolichnik.exe@gmail.com>
#
# License: GNU GPLv3

printlogo() {
    cat "$root"/logo
}

printhelp() {
    cat "$root"/help && exit 1
}

error() {
    printf "\\nERROR: $1\\n\\n" | sed "s,.*,$(tput setaf 1)&$(tput sgr0)," && printhelp
}

status() {
    for dir in ${directories[*]}; do
	cp "$root"/.archetypeignore $HOME/$dir
	rsync -anv --filter=':- .archetypeignore' $HOME/$dir/ $archetype/dotfiles/$dir/ | sed '/^$/d;/^\.\//d;/\/$/d;/^sent/d;/^sending/d;/^total/d' >> "$root"/statusmessage
	rm $HOME/$dir/.archetypeignore
    done

    if [ -s "$root"/statusmessage ]
    then
	printf "Modified files:\\n\\n"
        cat "$root"/statusmessage | sed "s,.*,$(tput setaf 1)&$(tput sgr0),"
	printf "\\nUse 'archetype push' to update local Archetype repository.\\n"
    else
	printf "\\nLocal repository up to date.\\n\\n"
    fi

    rm "$root"/statusmessage
}

remotestatus() {
    cd $archetype && git status ; cd - > /dev/null
}

pull() {
    for dir in ${directories[*]}; do
	cp "$root"/.archetypeignore $archetype/dotfiles/$dir
        rsync -av --filter=':- .archetypeignore' $archetype/dotfiles/$dir/ $HOME/$dir/
	rm $archetype/dotfiles/$dir/.archetypeignore
    done
}

remotepull() {
    cd $archetype && git pull ; cd - > /dev/null
}

push() {
    for dir in ${directories[*]}; do
	cp "$root"/.archetypeignore $HOME/$dir
        rsync -av --filter=':- .archetypeignore' $HOME/$dir/ $archetype/dotfiles/$dir/
	rm $HOME/$dir/.archetypeignore
    done
}

remotepush() {
    commitcommand="git commit -m \"$2\""

    [ -z "$2" ] && commitcommand="git commit"

    cd $archetype
    git add .
    eval "$commitcommand"
    git push
    cd - > /dev/null
}

sync() {
    echo "sync()"
}

progs() {
    echo "progs()"
}

root=$(dirname "$0")
action="$1"

while getopts ":r:h" o; do case "${o}" in
    r) action="remote${OPTARG}" ;;
    a) archetype="${OPTARG}" ;;
    h) printlogo && printhelp ;;
    *) printlogo && error "Invalid option: -$OPTARG" ;;
esac done

[ -z "$action" ] && action=printhelp
[ -z "$archetype" ] && archetype=$HOME/.archetype

# Directories to include during synchronization
directories=(".config" ".local/bin" ".local/share/applications" ".local/share/archetype" ".local/share/wallpapers")

# Call one of the functions and pass additional parameters
printlogo && type "$action" &>/dev/null && eval "$action \"$2\" \"$3\" \"$4\"" || error "Action '$action' does not exist."
