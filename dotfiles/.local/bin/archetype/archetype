#!/bin/sh

### Functions, options and variables ###

printhelp() {
    printf "Usage:\\n  archetype [options] <action>\\n\\nOptions:\\n  -a      Specify custom Archetype repository\\n  -r      Remote switch - perform any of the actions on the remote Archetype repository\\n\\nActions:\\n  status  Check for discrepancies between the Archetype repository and deployed files\\n  pull    Pull changes from the Archetype repository\\n  push    Push changes to the Archetype repository\\n  sync    Perform synchronization between the Archetype repository and the deployed files\\n  progs   Check for discrepancies between installed packages and programs.csv\\n" && exit 1
}

error() {
    printf "\\nERROR: $1\\n\\n" && printhelp
}

status() {
    for dir in ${directories[*]}; do
        rsync -anv --delete --progress $HOME/$dir $archetype/$dir
    done
}

remotestatus() {
    cd $archetype && git status ; cd - > /dev/null
}

pull() {
    echo "pull()"
}

remotepull() {
    cd $archetype && git pull ; cd - > /dev/null
}

push() {
    echo "push()"
}

remotepush() {
    commitcommand="git commit -m \"$2\""

    [ -z "$2" ] && commitcommand="git commit"

    cd $archetype
    git add .
    eval "$commitcommand"
    git push
    cd - > /dev/null
}

sync() {
    echo "sync()"
}

progs() {
    echo "progs()"
}

remoteprogs() {
    error "Remote switch (-r) is not compatible with 'progs' action"
}

exec="$1"
directories=(".config" ".local/bin" ".local/share/applications" ".local/share/archetype" ".local/share/wallpapers")

while getopts ":r:h" o; do case "${o}" in
    r) exec="remote${OPTARG}" ;;
    a) archetype="${OPTARG}" ;;
    h) printhelp ;;
    *) printf "Invalid option: -%s\\n\\n" "$OPTARG" && printhelp ;;
esac done

[ -z "$exec" ] && exec=printhelp
[ -z "$archetype" ] && archetype=$HOME/.archetype
# [ -z "$archetype" ] && archetype=./dir1

# Call one of the functions and pass any additional parameters.
eval $exec "$2" "$3" "$4" || error "Action '$exec' does not exist."
