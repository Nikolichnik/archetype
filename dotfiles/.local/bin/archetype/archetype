#!/bin/sh

### Functions, options and variables ###

printlogo() {
    cat ./logo
}

printhelp() {
    printlogo && cat ./help && exit 1
}

error() {
    printf "\\nERROR: $1\\n\\n" && printhelp
}

status() {
    for dir in ${directories[*]}; do
	cp ./.archetypeignore $HOME/$dir
	rsync -anv --filter=':- .archetypeignore' $HOME/$dir/ $archetype/dotfiles/$dir/ | sed '/^\.\//d;/\/$/d;/^sent/d;/^sending/d;/^total/d' >> statusmessage
	rm $HOME/$dir/.archetypeignore
    done

    if [ -s statusmessage ]
    then
	printf "Modified files:\\n\\n"
        cat statusmessage | sed '/^$/d' | sed "s,.*,$(tput setaf 1)&$(tput sgr0),"
	printf "\\nUse 'archetype push' to update local Archetype repository.\\n"
    else
	printf "\\nLocal repository up to date.\\n\\n"
    fi

    rm statusmessage
}

remotestatus() {
    cd $archetype && git status ; cd - > /dev/null
}

pull() {
    for dir in ${directories[*]}; do
	cp ./.archetypeignore $archetype/dotfiles/$dir
        rsync -av --filter=':- .archetypeignore' $archetype/dotfiles/$dir/ $HOME/$dir/
	rm $archetype/dotfiles/$dir/.archetypeignore
    done
}

remotepull() {
    cd $archetype && git pull ; cd - > /dev/null
}

push() {
    for dir in ${directories[*]}; do
	cp ./.archetypeignore $HOME/$dir
        rsync -av --filter=':- .archetypeignore' $HOME/$dir/ $archetype/dotfiles/$dir/
	rm $HOME/$dir/.archetypeignore
    done
}

remotepush() {
    commitcommand="git commit -m \"$2\""

    [ -z "$2" ] && commitcommand="git commit"

    cd $archetype
    git add .
    eval "$commitcommand"
    git push
    cd - > /dev/null
}

sync() {
    echo "sync()"
}

progs() {
    echo "progs()"
}

remoteprogs() {
    error "Remote switch (-r) is not compatible with 'progs' action"
}

exec="$1"
directories=(".config" ".local/bin" ".local/share/applications" ".local/share/archetype" ".local/share/wallpapers")

while getopts ":r:h" o; do case "${o}" in
    r) exec="remote${OPTARG}" ;;
    a) archetype="${OPTARG}" ;;
    h) printhelp ;;
    *) printf "Invalid option: -%s\\n\\n" "$OPTARG" && printhelp ;;
esac done

[ -z "$exec" ] && exec=printhelp
[ -z "$archetype" ] && archetype=$HOME/.archetype
# [ -z "$archetype" ] && archetype=./dir1

# Print the logo
printlogo

# Call one of the functions and pass any additional parameters.
eval "$exec \"$2\" \"$3\" \"$4\"" || error "Action '$exec' does not exist."
